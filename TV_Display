<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive NES Display and Remote</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: black;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            user-select: none; /* Disable text selection */
        }
        #container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            text-align: center;
        }
        .container {
            text-align: center;
            margin-top: 20px;
            width: 100%; /* Full width */
            max-width: 600px; /* Maximum width to match the remote */
        }
        .screen {
            width: 100%; /* Full width to match the container */
            height: auto; /* Adjust height to maintain aspect ratio */
            aspect-ratio: 3 / 2; /* 300px by 200px aspect ratio */
            background-color: black; /* Default to black (off state) */
            border: 5px solid lightblue;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 24px;
            margin-bottom: 20px;
            box-sizing: border-box; /* Include padding and border in the width and height */
        }
        .no-signal {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 16px;
            background-color: blue;
            padding: 5px;
            display: none; /* Default to hidden */
        }
        .input-display {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 16px;
            padding: 5px;
            display: none; /* Default to hidden */
        }
        .volume-display, .speed-display {
            position: absolute;
            top: -30px; /* Position above the video */
            font-size: 16px;
            padding: 5px;
            background-color: rgba(0, 0, 0, 0.5);
        }
        .volume-display {
            left: 10px;
        }
        .speed-display {
            right: 10px;
        }
        .controller {
            display: grid;
            grid-template-areas: 
                "dpad center-buttons action-buttons";
            grid-gap: 10px;
            padding: 10px;
            border: 2px solid black;
            background-color: #cccccc; /* Light gray background to resemble NES controller */
            width: 100%; /* Full width */
            height: auto; /* Adjust height to maintain aspect ratio */
            max-width: 600px; /* Maximum width to match the screen */
            border-radius: 8px; /* Rounded corners */
            box-sizing: border-box; /* Ensure padding and border are included in total width and height */
            margin-top: auto; /* Push controller to the bottom */
        }
        .dpad, .center-buttons, .action-buttons {
            display: grid;
        }
        .dpad {
            grid-template-areas: 
                ". up ."
                "left . right"
                ". down .";
            grid-gap: 5px; /* Adjust gap for smaller buttons */
            justify-self: start; /* Align dpad to the start */
        }
        .dpad div, .center-buttons div, .action-buttons div {
            width: 30px; /* Width for dpad buttons */
            height: 30px; /* Height for dpad buttons */
            border: 2px solid black;
            background-color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 20px;
            color: black;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .dpad div:active, .center-buttons div:active, .action-buttons div:active {
            background-color: #aaa;
        }
        .up::after {
            content: '▲';
        }
        .down::after {
            content: '▼';
        }
        .left::after {
            content: '◀';
        }
        .right::after {
            content: '▶';
        }
        .up { grid-area: up; }
        .down { grid-area: down; }
        .left { grid-area: left; }
        .right { grid-area: right; }
        .center-buttons {
            grid-template-rows: 1fr 1fr;
            grid-gap: 5px;
            justify-self: center;
            align-self: center;
        }
        .center-buttons div {
            width: 80px;
            height: 30px;
            font-size: 14px; /* Smaller font size */
        }
        .action-buttons {
            grid-template-columns: 1fr 1fr;
            grid-gap: 10px;
            justify-self: end; /* Align action buttons to the end */
        }
        .action-buttons div {
            width: 35px;
            height: 35px;
            border: 2px solid black;
            background-color: red;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 20px;
            color: white;
            cursor: pointer;
            border-radius: 50%; /* Make the buttons round */
        }
        .b-button { grid-column: 1; }
        .a-button { grid-column: 2; }
    </style>
</head>
<body>
    <div id="container">
        <div class="screen" id="screen">
            <div class="no-signal" id="noSignal">No Signal</div>
            <div class="input-display" id="inputDisplay"></div>
            <div class="volume-display" id="volumeDisplay">Volume: 50%</div>
            <div class="speed-display" id="speedDisplay">Speed: 1x</div>
        </div>
        <div class="container">
            <div class="controller">
                <div class="dpad">
                    <div class="up" onclick="buttonPressed('UP')"></div>
                    <div class="down" onclick="buttonPressed('DOWN')"></div>
                    <div class="left" onclick="buttonPressed('LEFT')"></div>
                    <div class="right" onclick="buttonPressed('RIGHT')"></div>
                </div>
                <div class="center-buttons">
                    <div class="select" onclick="buttonPressed('SELECT')">SELECT</div>
                    <div class="start" onclick="buttonPressed('START')">START</div>
                </div>
                <div class="action-buttons">
                    <div class="b-button" onclick="buttonPressed('B')">B</div>
                    <div class="a-button" onclick="buttonPressed('A')">A</div>
                </div>
            </div>
        </div>
    </div>
    <script>
        const noSignal = document.getElementById('noSignal');
        const inputDisplay = document.getElementById('inputDisplay');
        const volumeDisplay = document.getElementById('volumeDisplay');
        const speedDisplay = document.getElementById('speedDisplay');
        let iframe = null;

        let powerOn = false;
        const inputs = [
            { name: "HDMI 1", url: "https://www.youtube.com/embed/HiMbwCJDw_Y?autoplay=1" },
            { name: "HDMI 2", url: "https://www.youtube.com/embed/biq-NTLbUKw?autoplay=1" },
            { name: "VGA", url: "https://www.youtube.com/embed/U95qDswrmGM?autoplay=1" },
            { name: "NES", url: "https://www.youtube.com/embed/QpXb6aTtlTk?autoplay=1" }
        ];
        let currentInputIndex = 0; // Starts with "HDMI 1"
        let volume = 50; // Volume level (0-100)
        let speed = 1; // Speed multiplier (0.5x - 2x)

        function powerButton() {
            powerOn = !powerOn;
            const screen = document.getElementById('screen');
            
            if (powerOn) {
                screen.innerHTML = "<div class='starting-up'>One moment, starting up...</div>";
                setTimeout(() => {
                    currentInputIndex = 0; // Default to HDMI 1
                    inputDisplay.style.display = 'block';
                    inputDisplay.textContent = inputs[currentInputIndex].name; // Display current input when powered on
                    volumeDisplay.style.display = 'block';
                    speedDisplay.style.display = 'block';
                    updateScreen();
                }, 3000); // 3 seconds delay
            } else {
                screen.style.backgroundColor = 'black';
                screen.innerHTML = '';
                inputDisplay.style.display = 'none';
                noSignal.style.dis= 'none';
                speedDisplay.style.display = 'none';
                if (iframe) {
                    iframe.remove();
                    iframe = null;
                }
            }
        }

        function inputButton() {
            if (powerOn) {
                currentInputIndex = (currentInputIndex + 1) % inputs.length;
                inputDisplay.textContent = inputs[currentInputIndex].name;
                updateScreen();
            } else {
                alert('Power is off. Please turn on the power first.');
            }
        }

        function buttonPressed(button) {
            console.log(button + ' button pressed');
            switch(button) {
                case 'START':
                    powerButton();
                    break;
                case 'SELECT':
                    inputButton();
                    break;
                case 'UP':
                    if (volume < 100) {
                        volume += 10;
                        volumeDisplay.textContent = 'Volume: ' + volume + '%';
                        console.log('Volume increased to ' + volume + '%');
                    }
                    break;
                case 'DOWN':
                    if (volume > 0) {
                        volume -= 10;
                        volumeDisplay.textContent = 'Volume: ' + volume + '%';
                        console.log('Volume decreased to ' + volume + '%');
                    }
                    break;
                case 'LEFT':
                    if (speed > 0.5) {
                        speed -= 0.1;
                        speed = parseFloat(speed.toFixed(1)); // Fix floating point precision issues
                        speedDisplay.textContent = 'Speed: ' + speed + 'x';
                        console.log('Speed decreased to ' + speed + 'x');
                    }
                    break;
                case 'RIGHT':
                    if (speed < 2) {
                        speed += 0.1;
                        speed = parseFloat(speed.toFixed(1)); // Fix floating point precision issues
                        speedDisplay.textContent = 'Speed: ' + speed + 'x';
                        console.log('Speed increased to ' + speed + 'x');
                    }
                    break;
                case 'B':
                    console.log('Button B pressed');
                    alert('Button B action executed!');
                    break;
                case 'A':
                    togglePlayPause();
                    break;
                default:
                    console.log('Unknown button pressed');
            }
        }

        function updateScreen() {
            const screen = document.getElementById('screen');
            screen.innerHTML = '<iframe id="videoIframe" width="100%" height="100%" src="' + inputs[currentInputIndex].url + '" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>';
            iframe = document.getElementById('videoIframe');
            if (inputs[currentInputIndex].name === "VGA") {
                noSignal.style.display = 'block';
            } else {
                noSignal.style.display = 'none';
            }
        }

        function togglePlayPause() {
            if (iframe) {
                const iframeSrc = iframe.src;
                if (iframeSrc.includes("autoplay=1")) {
                    iframe.src = iframeSrc.replace("autoplay=1", "autoplay=0");
                } else {
                    iframe.src = iframeSrc.replace("autoplay=0", "autoplay=1");
                }
            }
        }

        // Ensure volume and speed displays are always visible
        function ensureDisplays() {
            volumeDisplay.style.display = 'block';
            speedDisplay.style.display = 'block';
        }

        // Keep checking the displays to ensure they are visible
        setInterval(ensureDisplays, 1000); // Check every second
    </script>
</body>
</html>
